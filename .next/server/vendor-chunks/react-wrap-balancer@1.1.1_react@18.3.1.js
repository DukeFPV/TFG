"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-wrap-balancer@1.1.1_react@18.3.1";
exports.ids = ["vendor-chunks/react-wrap-balancer@1.1.1_react@18.3.1"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/react-wrap-balancer@1.1.1_react@18.3.1/node_modules/react-wrap-balancer/dist/index.mjs":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-wrap-balancer@1.1.1_react@18.3.1/node_modules/react-wrap-balancer/dist/index.mjs ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Balancer: () => (/* binding */ P),\n/* harmony export */   Provider: () => (/* binding */ Y),\n/* harmony export */   \"default\": () => (/* binding */ A)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@15.0.3_@opentelemetry+api@1.9.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ Balancer,Provider,default auto */ \n\nvar E = \"undefined\" == \"undefined\", m = E ? react__WEBPACK_IMPORTED_MODULE_0__.useEffect : react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect, B = 0, _ = ()=>++B, v = !1;\nfunction O() {\n    let [n, r] = react__WEBPACK_IMPORTED_MODULE_0__.useState(v ? _ : void 0);\n    return m(()=>{\n        n === void 0 && r(_()), v = !0;\n    }, []), n === void 0 ? n : `rwb-${n.toString(32)}`;\n}\nfunction R() {\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"R.useMemo\": ()=>\"useId\" in react__WEBPACK_IMPORTED_MODULE_0__ ? react__WEBPACK_IMPORTED_MODULE_0__.useId : O\n    }[\"R.useMemo\"], [])();\n}\nvar y = \"__wrap_b\", f = \"__wrap_n\", S = \"__wrap_o\", T = (n, r, e)=>{\n    e = e || document.querySelector(`[data-br=\"${n}\"]`);\n    let t = e == null ? void 0 : e.parentElement;\n    if (!t) return;\n    let l = (u)=>e.style.maxWidth = u + \"px\";\n    e.style.maxWidth = \"\";\n    let i = t.clientWidth, d = t.clientHeight, o = i / 2 - .25, s = i + .5, c;\n    if (i) {\n        for(l(o), o = Math.max(e.scrollWidth, o); o + 1 < s;)c = Math.round((o + s) / 2), l(c), t.clientHeight === d ? s = c : o = c;\n        l(s * r + i * (1 - r));\n    }\n    e.__wrap_o || (typeof ResizeObserver != \"undefined\" ? (e.__wrap_o = new ResizeObserver(()=>{\n        self.__wrap_b(0, +e.dataset.brr, e);\n    })).observe(t) :  true && console.warn(\"The browser you are using does not support the ResizeObserver API. Please consider add polyfill for this API to avoid potential layout shifts or upgrade your browser. Read more: https://github.com/shuding/react-wrap-balancer#browser-support-information\"));\n}, I = T.toString(), w = '(self.CSS&&CSS.supports(\"text-wrap\",\"balance\")?1:2)', g = (n, r, e = \"\")=>(e && (e = `self.${f}!=1&&${e}`), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"script\", {\n        suppressHydrationWarning: !0,\n        dangerouslySetInnerHTML: {\n            __html: (n ? \"\" : `self.${f}=self.${f}||${w};self.${y}=${I};`) + e\n        },\n        nonce: r\n    })), h = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    preferNative: !0,\n    hasProvider: !1\n}), Y = ({ preferNative: n = !0, nonce: r, children: e })=>{\n    let t = react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"Y.useMemo[t]\": ()=>({\n                preferNative: n,\n                hasProvider: !0\n            })\n    }[\"Y.useMemo[t]\"], [\n        n\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(h.Provider, {\n        value: t\n    }, g(!1, r), e);\n}, P = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ ratio: n = 1, preferNative: r, nonce: e, children: t, as: l, ...i }, d)=>{\n    let o = R(), s = react__WEBPACK_IMPORTED_MODULE_0__.useRef(), c = react__WEBPACK_IMPORTED_MODULE_0__.useContext(h), u = r != null ? r : c.preferNative, x = l || \"span\";\n    return react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle(d, {\n        \"P.useImperativeHandle\": ()=>s.current\n    }[\"P.useImperativeHandle\"], []), m(()=>{\n        u && self[f] === 1 || s.current && (self[y] = T)(0, n, s.current);\n    }, [\n        t,\n        u,\n        n\n    ]), m(()=>{\n        if (!(u && self[f] === 1)) return ()=>{\n            if (!s.current) return;\n            let b = s.current[S];\n            b && (b.disconnect(), delete s.current[S]);\n        };\n    }, [\n        u\n    ]),  true && t && !Array.isArray(t) && typeof t == \"object\" && \"type\" in t && typeof t.type == \"string\" && t.type !== \"span\" && console.warn(`<Balancer> should not wrap <${t.type}> inside. Instead, it should directly wrap text or inline nodes.\n\nTry changing this:\n  <Balancer><${t.type}>content</${t.type}></Balancer>\nTo:\n  <${t.type}><Balancer>content</Balancer></${t.type}>`), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(x, {\n        ...i,\n        \"data-br\": o,\n        \"data-brr\": n,\n        ref: s,\n        style: {\n            display: \"inline-block\",\n            verticalAlign: \"top\",\n            textDecoration: \"inherit\",\n            textWrap: u ? \"balance\" : \"initial\"\n        },\n        suppressHydrationWarning: !0\n    }, t), g(c.hasProvider, e, `self.${y}(\"${o}\",${n})`));\n});\nif (!E && \"development\" !== \"production\") {\n    let n = document.querySelector(\"[data-next-hide-fouc]\");\n    if (n) {\n        let r = (t)=>{\n            for (let l of t)for (let i of Array.from(l.removedNodes)){\n                if (i !== n) continue;\n                e.disconnect();\n                let d = document.querySelectorAll(\"[data-br]\");\n                for (let o of Array.from(d))self[y](0, +o.dataset.brr, o);\n            }\n        }, e = new MutationObserver(r);\n        e.observe(document.head, {\n            childList: !0\n        });\n    }\n}\nvar A = P;\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcmVhY3Qtd3JhcC1iYWxhbmNlckAxLjEuMV9yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL3JlYWN0LXdyYXAtYmFsYW5jZXIvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OzsrRUNBQTtBQUFrQjtBQUVYLElBQU1DLElBQVksT0FBTyxRQUFXLGFBQzlCQyxJQUE0QkQsSUFDckNBLDRDQUFNLEdBQ05BLGtEQUFNLEVBRU5FLElBQUssR0FDSEMsSUFBUSxJQUFNLEVBQUVELEdBQ2xCRSxJQUF3QjtBQUU1QixTQUFTQyxHQUFnQjtJQUN2QixJQUFNLENBQUNDLEdBQUlDLENBQUssSUFBSVAsMkNBQU0sQ0FBU0ksSUFBd0JELElBQVEsTUFBUztJQVU1RSxPQVJBRixFQUEwQixJQUFNO1FBQzFCSyxNQUFPLFVBQ1RDLEVBQU1KLEVBQU0sQ0FBQyxHQUdmQyxJQUF3QjtJQUMxQixHQUFHLENBQUMsQ0FBQyxHQUVERSxNQUFPLFNBQ0ZBLElBR0YsT0FBT0EsRUFBRyxTQUFTLEVBQUU7QUFDOUI7QUFhTyxTQUFTRSxHQUFRO0lBTXRCLE9BTHVCUiwwQ0FBTTtxQkFBUSxJQUMvQiw2Q0FBV0QsR0FBY0Msd0NBQU0sR0FDNUJLO29CQUNOLENBQUMsQ0FBQyxFQUVpQjtBQUN4QjtBRDFDQSxJQUFNSSxJQUFhLFlBQ2JDLElBQW9CLFlBQ3BCQyxJQUFzQixZQXVCdEJDLElBQXVCLENBQUNOLEdBQUlPLEdBQU9DLElBQVk7SUFDbkRBLElBQ0VBLEtBQVcsU0FBUyxjQUE4QixhQUFhUixFQUFBQSxFQUFBQSxDQUFNO0lBQ3ZFLElBQU1TLElBQVlELEtBQUEsZ0JBQUFBLEVBQVM7SUFFM0IsSUFBSSxDQUFDQyxHQUFhO0lBRWxCLElBQU1DLElBQVVDLEtBQW1CSCxFQUFRLE1BQU0sV0FBV0csSUFBUTtJQUdwRUgsRUFBUSxNQUFNLFdBQVc7SUFHekIsSUFBTUcsSUFBUUYsRUFBVSxhQUNsQkcsSUFBU0gsRUFBVSxjQUdy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Q0FBUTtRQUM5Q0ksRUFBUyxRQUFRLFNBQVMsTUFBTTtZQUFFLFdBQVc7UUFBSyxDQUFDO0lBQUE7QUFBQTtBQUl2RCxJQUFPRyxJQUFRaEI7QUFBQUEiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jYXJsb3MvRGVza3RvcC9URkcvc3JjL2luZGV4LnRzeCIsIi9Vc2Vycy9jYXJsb3MvRGVza3RvcC9URkcvc3JjL3V0aWxzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCdcblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlSWQsIElTX1NFUlZFUiwgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4vdXRpbHMnXG5cbmNvbnN0IFNZTUJPTF9LRVkgPSAnX193cmFwX2InXG5jb25zdCBTWU1CT0xfTkFUSVZFX0tFWSA9ICdfX3dyYXBfbidcbmNvbnN0IFNZTUJPTF9PQlNFUlZFUl9LRVkgPSAnX193cmFwX28nXG5cbmludGVyZmFjZSBXcmFwcGVyRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgW1NZTUJPTF9PQlNFUlZFUl9LRVldPzogUmVzaXplT2JzZXJ2ZXIgfCB1bmRlZmluZWRcbn1cblxudHlwZSBSZWxheW91dEZuID0gKFxuICBpZDogc3RyaW5nIHwgbnVtYmVyLFxuICByYXRpbzogbnVtYmVyLFxuICB3cmFwcGVyPzogV3JhcHBlckVsZW1lbnRcbikgPT4gdm9pZFxuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBXaW5kb3cge1xuICAgIFtTWU1CT0xfS0VZXTogUmVsYXlvdXRGblxuICAgIC8vIEEgZmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIHRoZSBicm93c2VyIHN1cHBvcnRzIHRleHQtYmFsYW5jaW5nIG5hdGl2ZWx5LlxuICAgIC8vIHVuZGVmaW5lZDogbm90IGluamVjdGVkXG4gICAgLy8gMTogaW5qZWN0ZWQgYW5kIHN1cHBvcnRlZFxuICAgIC8vIDI6IGluamVjdGVkIGJ1dCBub3Qgc3VwcG9ydGVkXG4gICAgW1NZTUJPTF9OQVRJVkVfS0VZXT86IG51bWJlclxuICB9XG59XG5cbmNvbnN0IHJlbGF5b3V0OiBSZWxheW91dEZuID0gKGlkLCByYXRpbywgd3JhcHBlcikgPT4ge1xuICB3cmFwcGVyID1cbiAgICB3cmFwcGVyIHx8IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3I8V3JhcHBlckVsZW1lbnQ+KGBbZGF0YS1icj1cIiR7aWR9XCJdYClcbiAgY29uc3QgY29udGFpbmVyID0gd3JhcHBlcj8ucGFyZW50RWxlbWVudFxuXG4gIGlmICghY29udGFpbmVyKSB7IHJldHVybjsgfVxuXG4gIGNvbnN0IHVwZGF0ZSA9ICh3aWR0aDogbnVtYmVyKSA9PiAod3JhcHBlci5zdHlsZS5tYXhXaWR0aCA9IHdpZHRoICsgJ3B4JylcblxuICAvLyBSZXNldCB3cmFwcGVyIHdpZHRoXG4gIHdyYXBwZXIuc3R5bGUubWF4V2lkdGggPSAnJ1xuXG4gIC8vIEdldCB0aGUgaW5pdGlhbCBjb250YWluZXIgc2l6ZVxuICBjb25zdCB3aWR0aCA9IGNvbnRhaW5lci5jbGllbnRXaWR0aFxuICBjb25zdCBoZWlnaHQgPSBjb250YWluZXIuY2xpZW50SGVpZ2h0XG5cbiAgLy8gU3luY2hyb25vdXNseSBkbyBiaW5hcnkgc2VhcmNoIGFuZCBjYWxjdWxhdGUgdGhlIGxheW91dFxuICBsZXQgbG93ZXI6IG51bWJlciA9IHdpZHRoIC8gMiAtIDAuMjVcbiAgbGV0IHVwcGVyOiBudW1iZXIgPSB3aWR0aCArIDAuNVxuICBsZXQgbWlkZGxlOiBudW1iZXJcblxuICBpZiAod2lkdGgpIHtcbiAgICAvLyBFbnN1cmUgd2UgZG9uJ3Qgc2VhcmNoIHdpZHRocyBsb3dlciB0aGFuIHdoZW4gdGhlIHRleHQgb3ZlcmZsb3dzXG4gICAgdXBkYXRlKGxvd2VyKVxuICAgIGxvd2VyID0gTWF0aC5tYXgod3JhcHBlci5zY3JvbGxXaWR0aCwgbG93ZXIpXG5cbiAgICB3aGlsZSAobG93ZXIgKyAxIDwgdXBwZXIpIHtcbiAgICAgIG1pZGRsZSA9IE1hdGgucm91bmQoKGxvd2VyICsgdXBwZXIpIC8gMilcbiAgICAgIHVwZGF0ZShtaWRkbGUpXG4gICAgICBpZiAoY29udGFpbmVyLmNsaWVudEhlaWdodCA9PT0gaGVpZ2h0KSB7XG4gICAgICAgIHVwcGVyID0gbWlkZGxlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb3dlciA9IG1pZGRsZVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFVwZGF0ZSB0aGUgd3JhcHBlciB3aWR0aFxuICAgIHVwZGF0ZSh1cHBlciAqIHJhdGlvICsgd2lkdGggKiAoMSAtIHJhdGlvKSlcbiAgfVxuXG4gIC8vIENyZWF0ZSBhIG5ldyBvYnNlcnZlciBpZiB3ZSBkb24ndCBoYXZlIG9uZS5cbiAgLy8gTm90ZSB0aGF0IHdlIG11c3QgaW5saW5lIHRoZSBrZXkgaGVyZSBhcyB3ZSB1c2UgYHRvU3RyaW5nKClgIHRvIHNlcmlhbGl6ZVxuICAvLyB0aGUgZnVuY3Rpb24uXG4gIGlmICghd3JhcHBlclsnX193cmFwX28nXSkge1xuICAgIGlmICh0eXBlb2YgUmVzaXplT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICA7KHdyYXBwZXJbJ19fd3JhcF9vJ10gPSBuZXcgUmVzaXplT2JzZXJ2ZXIoKCkgPT4ge1xuICAgICAgICBzZWxmLl9fd3JhcF9iKDAsICt3cmFwcGVyLmRhdGFzZXQuYnJyLCB3cmFwcGVyKVxuICAgICAgfSkpLm9ic2VydmUoY29udGFpbmVyKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTaWxlbnRseSBpZ25vcmUgUmVzaXplT2JzZXJ2ZXIgZm9yIHByb2R1Y3Rpb24gYnVpbGRzXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICdUaGUgYnJvd3NlciB5b3UgYXJlIHVzaW5nIGRvZXMgbm90IHN1cHBvcnQgdGhlIFJlc2l6ZU9ic2VydmVyIEFQSS4gJyArXG4gICAgICAgICAgICAnUGxlYXNlIGNvbnNpZGVyIGFkZCBwb2x5ZmlsbCBmb3IgdGhpcyBBUEkgdG8gYXZvaWQgcG90ZW50aWFsIGxheW91dCBzaGlmdHMgb3IgdXBncmFkZSB5b3VyIGJyb3dzZXIuICcgK1xuICAgICAgICAgICAgJ1JlYWQgbW9yZTogaHR0cHM6Ly9naXRodWIuY29tL3NodWRpbmcvcmVhY3Qtd3JhcC1iYWxhbmNlciNicm93c2VyLXN1cHBvcnQtaW5mb3JtYXRpb24nXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuY29uc3QgUkVMQVlPVVRfU1RSID0gcmVsYXlvdXQudG9TdHJpbmcoKVxuXG5jb25zdCBpc1RleHRXcmFwQmFsYW5jZVN1cHBvcnRlZCA9IGAoc2VsZi5DU1MmJkNTUy5zdXBwb3J0cyhcInRleHQtd3JhcFwiLFwiYmFsYW5jZVwiKT8xOjIpYFxuXG5jb25zdCBjcmVhdGVTY3JpcHRFbGVtZW50ID0gKFxuICBpbmplY3RlZDogYm9vbGVhbixcbiAgbm9uY2U/OiBzdHJpbmcsXG4gIHN1ZmZpeDogc3RyaW5nID0gJydcbikgPT4ge1xuICBpZiAoc3VmZml4KSB7XG4gICAgc3VmZml4ID0gYHNlbGYuJHtTWU1CT0xfTkFUSVZFX0tFWX0hPTEmJiR7c3VmZml4fWBcbiAgfVxuICByZXR1cm4gKFxuICAgIDxzY3JpcHRcbiAgICAgIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1xuICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tcbiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBiYWxhbmNlIGluaXRpYWxseSBmb3IgU1NSXG4gICAgICAgIF9faHRtbDpcbiAgICAgICAgICAoaW5qZWN0ZWRcbiAgICAgICAgICAgID8gJydcbiAgICAgICAgICAgIDogYHNlbGYuJHtTWU1CT0xfTkFUSVZFX0tFWX09c2VsZi4ke1NZTUJPTF9OQVRJVkVfS0VZfXx8JHtpc1RleHRXcmFwQmFsYW5jZVN1cHBvcnRlZH07c2VsZi4ke1NZTUJPTF9LRVl9PSR7UkVMQVlPVVRfU1RSfTtgKSArXG4gICAgICAgICAgc3VmZml4LFxuICAgICAgfX1cbiAgICAgIG5vbmNlPXtub25jZX1cbiAgICAvPlxuICApXG59XG5cbmludGVyZmFjZSBCYWxhbmNlck93blByb3BzPFxuICBFbGVtZW50VHlwZSBleHRlbmRzIFJlYWN0LkVsZW1lbnRUeXBlID0gUmVhY3QuRWxlbWVudFR5cGVcbj4gZXh0ZW5kcyBSZWFjdC5IVE1MQXR0cmlidXRlczxIVE1MRWxlbWVudD4ge1xuICAvKipcbiAgICogVGhlIEhUTUwgdGFnIHRvIHVzZSBmb3IgdGhlIHdyYXBwZXIgZWxlbWVudC5cbiAgICogQGRlZmF1bHQgJ3NwYW4nXG4gICAqL1xuICBhcz86IEVsZW1lbnRUeXBlXG4gIC8qKlxuICAgKiBUaGUgYmFsYW5jZSByYXRpbyBvZiB0aGUgd3JhcHBlciB3aWR0aCAoMCA8PSByYXRpbyA8PSAxKS5cbiAgICogMCBtZWFucyB0aGUgd3JhcHBlciB3aWR0aCBpcyB0aGUgc2FtZSBhcyB0aGUgY29udGFpbmVyIHdpZHRoIChubyBiYWxhbmNlLCBicm93c2VyIGRlZmF1bHQpLlxuICAgKiAxIG1lYW5zIHRoZSB3cmFwcGVyIHdpZHRoIGlzIHRoZSBtaW5pbXVtIChmdWxsIGJhbGFuY2UsIG1vc3QgY29tcGFjdCkuXG4gICAqIEBkZWZhdWx0IDFcbiAgICovXG4gIHJhdGlvPzogbnVtYmVyXG4gIC8qKlxuICAgKiBBbiBvcHRpb24gdG8gc2tpcCB0aGUgcmUtYmFsYW5jZSBsb2dpY1xuICAgKiBhbmQgdXNlIHRoZSBuYXRpdmUgQ1NTIHRleHQtYmFsYW5jaW5nIGlmIHN1cHBvcnRlZC5cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgcHJlZmVyTmF0aXZlPzogYm9vbGVhblxuICAvKipcbiAgICogVGhlIG5vbmNlIGF0dHJpYnV0ZSB0byBhbGxvd2xpc3QgaW5saW5lIHNjcmlwdCBpbmplY3Rpb24gYnkgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIG5vbmNlPzogc3RyaW5nXG59XG5cbnR5cGUgQmFsYW5jZXJQcm9wczxFbGVtZW50VHlwZSBleHRlbmRzIFJlYWN0LkVsZW1lbnRUeXBlPiA9XG4gIEJhbGFuY2VyT3duUHJvcHM8RWxlbWVudFR5cGU+ICZcbiAgICBPbWl0PFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjxFbGVtZW50VHlwZT4sIGtleW9mIEJhbGFuY2VyT3duUHJvcHM+XG5cbi8qKlxuICogQW4gb3B0aW9uYWwgcHJvdmlkZXIgdG8gaW5qZWN0IHRoZSBnbG9iYWwgcmVsYXlvdXQgZnVuY3Rpb24sIHNvIGFsbCBjaGlsZHJlblxuICogQmFsYW5jZXIgY29tcG9uZW50cyBjYW4gc2hhcmUgaXQuXG4gKi9cbmNvbnN0IEJhbGFuY2VyQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8e1xuICBwcmVmZXJOYXRpdmU6IGJvb2xlYW5cbiAgaGFzUHJvdmlkZXI6IGJvb2xlYW5cbn0+KHsgcHJlZmVyTmF0aXZlOiB0cnVlLCBoYXNQcm92aWRlcjogZmFsc2UgfSlcbmNvbnN0IFByb3ZpZGVyOiBSZWFjdC5GQzx7XG4gIC8qKlxuICAgKiBBbiBvcHRpb24gdG8gc2tpcCB0aGUgcmUtYmFsYW5jZSBsb2dpY1xuICAgKiBhbmQgdXNlIHRoZSBuYXRpdmUgQ1NTIHRleHQtYmFsYW5jaW5nIGlmIHN1cHBvcnRlZC5cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgcHJlZmVyTmF0aXZlPzogYm9vbGVhblxuICAvKipcbiAgICogVGhlIG5vbmNlIGF0dHJpYnV0ZSB0byBhbGxvd2xpc3QgaW5saW5lIHNjcmlwdCBpbmplY3Rpb24gYnkgdGhlIGNvbXBvbmVudFxuICAgKi9cbiAgbm9uY2U/OiBzdHJpbmdcbiAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGVcbn0+ID0gKHsgcHJlZmVyTmF0aXZlID0gdHJ1ZSwgbm9uY2UsIGNoaWxkcmVuIH0pID0+IHtcbiAgY29uc3QgY29udGV4dFZhbHVlID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByZWZlck5hdGl2ZSxcbiAgICAgIGhhc1Byb3ZpZGVyOiB0cnVlLFxuICAgIH1cbiAgfSwgW3ByZWZlck5hdGl2ZV0pXG4gIHJldHVybiAoXG4gICAgPEJhbGFuY2VyQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17Y29udGV4dFZhbHVlfT5cbiAgICAgIHtjcmVhdGVTY3JpcHRFbGVtZW50KGZhbHNlLCBub25jZSl9XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9CYWxhbmNlckNvbnRleHQuUHJvdmlkZXI+XG4gIClcbn1cblxuY29uc3QgQmFsYW5jZXIgPSBSZWFjdC5mb3J3YXJkUmVmKFxuICA8RWxlbWVudFR5cGUgZXh0ZW5kcyBSZWFjdC5FbGVtZW50VHlwZSA9IFJlYWN0LkVsZW1lbnRUeXBlPihcbiAgICB7XG4gICAgICByYXRpbyA9IDEsXG4gICAgICBwcmVmZXJOYXRpdmUsXG4gICAgICBub25jZSxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgYXMsXG4gICAgICAuLi5wcm9wc1xuICAgIH06IEJhbGFuY2VyUHJvcHM8RWxlbWVudFR5cGU+LFxuICAgIHJlZlxuICApID0+IHtcbiAgICBjb25zdCBpZCA9IHVzZUlkKClcbiAgICBjb25zdCB3cmFwcGVyUmVmID0gUmVhY3QudXNlUmVmPFdyYXBwZXJFbGVtZW50PigpXG4gICAgY29uc3QgY29udGV4dFZhbHVlID0gUmVhY3QudXNlQ29udGV4dChCYWxhbmNlckNvbnRleHQpXG4gICAgY29uc3QgcHJlZmVyTmF0aXZlQmFsYW5jaW5nID0gcHJlZmVyTmF0aXZlID8/IGNvbnRleHRWYWx1ZS5wcmVmZXJOYXRpdmVcbiAgICBjb25zdCBXcmFwcGVyOiBSZWFjdC5FbGVtZW50VHlwZSA9IGFzIHx8ICdzcGFuJ1xuXG4gICAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShyZWYsICgpID0+IHdyYXBwZXJSZWYuY3VycmVudCwgW10pXG5cbiAgICAvLyBSZS1iYWxhbmNlIG9uIGNvbnRlbnQgY2hhbmdlIGFuZCBvbiBtb3VudC9oeWRyYXRpb24uXG4gICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICAvLyBTa2lwIGlmIHRoZSBicm93c2VyIHN1cHBvcnRzIHRleHQtYmFsYW5jaW5nIG5hdGl2ZWx5LlxuICAgICAgaWYgKHByZWZlck5hdGl2ZUJhbGFuY2luZyAmJiBzZWxmW1NZTUJPTF9OQVRJVkVfS0VZXSA9PT0gMSkgcmV0dXJuXG5cbiAgICAgIGlmICh3cmFwcGVyUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgLy8gUmUtYXNzaWduIHRoZSBmdW5jdGlvbiBoZXJlIGFzIHRoZSBjb21wb25lbnQgY2FuIGJlIGR5bmFtaWNhbGx5IHJlbmRlcmVkLCBhbmQgc2NyaXB0IHRhZyB3b24ndCB3b3JrIGluIHRoYXQgY2FzZS5cbiAgICAgICAgOyhzZWxmW1NZTUJPTF9LRVldID0gcmVsYXlvdXQpKDAsIHJhdGlvLCB3cmFwcGVyUmVmLmN1cnJlbnQpXG4gICAgICB9XG4gICAgfSwgW2NoaWxkcmVuLCBwcmVmZXJOYXRpdmVCYWxhbmNpbmcsIHJhdGlvXSlcblxuICAgIC8vIFJlbW92ZSB0aGUgb2JzZXJ2ZXIgd2hlbiB1bm1vdW50aW5nLlxuICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgLy8gU2tpcCBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0ZXh0LWJhbGFuY2luZyBuYXRpdmVseS5cbiAgICAgIGlmIChwcmVmZXJOYXRpdmVCYWxhbmNpbmcgJiYgc2VsZltTWU1CT0xfTkFUSVZFX0tFWV0gPT09IDEpIHJldHVyblxuXG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBpZiAoIXdyYXBwZXJSZWYuY3VycmVudCkgcmV0dXJuXG5cbiAgICAgICAgY29uc3QgcmVzaXplT2JzZXJ2ZXIgPSB3cmFwcGVyUmVmLmN1cnJlbnRbU1lNQk9MX09CU0VSVkVSX0tFWV1cbiAgICAgICAgaWYgKCFyZXNpemVPYnNlcnZlcikgcmV0dXJuXG5cbiAgICAgICAgcmVzaXplT2JzZXJ2ZXIuZGlzY29ubmVjdCgpXG4gICAgICAgIGRlbGV0ZSB3cmFwcGVyUmVmLmN1cnJlbnRbU1lNQk9MX09CU0VSVkVSX0tFWV1cbiAgICAgIH1cbiAgICB9LCBbcHJlZmVyTmF0aXZlQmFsYW5jaW5nXSlcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgLy8gSW4gZGV2ZWxvcG1lbnQsIHdlIGNoZWNrIGBjaGlsZHJlbmAncyB0eXBlIHRvIGVuc3VyZSB3ZSBhcmUgbm90IHdyYXBwaW5nXG4gICAgICAvLyBlbGVtZW50cyBsaWtlIDxwPiBvciA8aDE+IGluc2lkZS4gSW5zdGVhZCA8QmFsYW5jZXI+IHNob3VsZCBkaXJlY3RseVxuICAgICAgLy8gd3JhcCB0ZXh0IG5vZGVzLlxuICAgICAgaWYgKFxuICAgICAgICBjaGlsZHJlbiAmJlxuICAgICAgICAhQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiZcbiAgICAgICAgdHlwZW9mIGNoaWxkcmVuID09PSAnb2JqZWN0J1xuICAgICAgKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAndHlwZScgaW4gY2hpbGRyZW4gJiZcbiAgICAgICAgICB0eXBlb2YgY2hpbGRyZW4udHlwZSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICBjaGlsZHJlbi50eXBlICE9PSAnc3BhbidcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgYDxCYWxhbmNlcj4gc2hvdWxkIG5vdCB3cmFwIDwke2NoaWxkcmVuLnR5cGV9PiBpbnNpZGUuIEluc3RlYWQsIGl0IHNob3VsZCBkaXJlY3RseSB3cmFwIHRleHQgb3IgaW5saW5lIG5vZGVzLlxuXG5UcnkgY2hhbmdpbmcgdGhpczpcbiAgPEJhbGFuY2VyPjwke2NoaWxkcmVuLnR5cGV9PmNvbnRlbnQ8LyR7Y2hpbGRyZW4udHlwZX0+PC9CYWxhbmNlcj5cblRvOlxuICA8JHtjaGlsZHJlbi50eXBlfT48QmFsYW5jZXI+Y29udGVudDwvQmFsYW5jZXI+PC8ke2NoaWxkcmVuLnR5cGV9PmBcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPD5cbiAgICAgICAgPFdyYXBwZXJcbiAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgZGF0YS1icj17aWR9XG4gICAgICAgICAgZGF0YS1icnI9e3JhdGlvfVxuICAgICAgICAgIHJlZj17d3JhcHBlclJlZn1cbiAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICAgICAgICB2ZXJ0aWNhbEFsaWduOiAndG9wJyxcbiAgICAgICAgICAgIHRleHREZWNvcmF0aW9uOiAnaW5oZXJpdCcsXG4gICAgICAgICAgICB0ZXh0V3JhcDogcHJlZmVyTmF0aXZlQmFsYW5jaW5nID8gJ2JhbGFuY2UnIDogJ2luaXRpYWwnLFxuICAgICAgICAgIH19XG4gICAgICAgICAgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXG4gICAgICAgID5cbiAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvV3JhcHBlcj5cbiAgICAgICAge2NyZWF0ZVNjcmlwdEVsZW1lbnQoXG4gICAgICAgICAgY29udGV4dFZhbHVlLmhhc1Byb3ZpZGVyLFxuICAgICAgICAgIG5vbmNlLFxuICAgICAgICAgIGBzZWxmLiR7U1lNQk9MX0tFWX0oXCIke2lkfVwiLCR7cmF0aW99KWBcbiAgICAgICAgKX1cbiAgICAgIDwvPlxuICAgIClcbiAgfVxuKVxuXG4vLyBBcyBOZXh0LmpzIGFkZHMgYGRpc3BsYXk6IG5vbmVgIHRvIGBib2R5YCBmb3IgZGV2ZWxvcG1lbnQsIHdlIG5lZWQgdG8gdHJpZ2dlclxuLy8gYSByZS1iYWxhbmNlIHJpZ2h0IGFmdGVyIHRoZSBzdHlsZSBpcyByZW1vdmVkLCBzeW5jaHJvbm91c2x5LlxuaWYgKCFJU19TRVJWRVIgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBjb25zdCBuZXh0X2Rldl9zdHlsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3I8SFRNTEVsZW1lbnQ+KFxuICAgICdbZGF0YS1uZXh0LWhpZGUtZm91Y10nXG4gIClcbiAgaWYgKG5leHRfZGV2X3N0eWxlKSB7XG4gICAgY29uc3QgY2FsbGJhY2s6IE11dGF0aW9uQ2FsbGJhY2sgPSAobXV0YXRpb25MaXN0KSA9PiB7XG4gICAgICBmb3IgKGNvbnN0IG11dGF0aW9uIG9mIG11dGF0aW9uTGlzdCkge1xuICAgICAgICBmb3IgKGNvbnN0IG5vZGUgb2YgQXJyYXkuZnJvbShtdXRhdGlvbi5yZW1vdmVkTm9kZXMpKSB7XG4gICAgICAgICAgaWYgKG5vZGUgIT09IG5leHRfZGV2X3N0eWxlKSBjb250aW51ZVxuXG4gICAgICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpXG4gICAgICAgICAgY29uc3QgZWxlbWVudHMgPVxuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbDxXcmFwcGVyRWxlbWVudD4oJ1tkYXRhLWJyXScpXG5cbiAgICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgQXJyYXkuZnJvbShlbGVtZW50cykpIHtcbiAgICAgICAgICAgIHNlbGZbU1lNQk9MX0tFWV0oMCwgK2VsZW1lbnQuZGF0YXNldC5icnIsIGVsZW1lbnQpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoY2FsbGJhY2spXG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5oZWFkLCB7IGNoaWxkTGlzdDogdHJ1ZSB9KVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJhbGFuY2VyXG5leHBvcnQgeyBQcm92aWRlciwgQmFsYW5jZXIsIEJhbGFuY2VyT3duUHJvcHMgfVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5leHBvcnQgY29uc3QgSVNfU0VSVkVSID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCdcbmV4cG9ydCBjb25zdCB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gSVNfU0VSVkVSXG4gID8gUmVhY3QudXNlRWZmZWN0XG4gIDogUmVhY3QudXNlTGF5b3V0RWZmZWN0XG5cbmxldCBJRCA9IDBcbmNvbnN0IGdlbklkID0gKCkgPT4gKytJRFxubGV0IHNlcnZlckhhbmRvZmZDb21wbGV0ZSA9IGZhbHNlXG5cbmZ1bmN0aW9uIHVzZUlkUG9seWZpbGwoKSB7XG4gIGNvbnN0IFtpZCwgc2V0SWRdID0gUmVhY3QudXNlU3RhdGUoc2VydmVySGFuZG9mZkNvbXBsZXRlID8gZ2VuSWQgOiB1bmRlZmluZWQpXG5cbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHNldElkKGdlbklkKCkpXG4gICAgfVxuXG4gICAgc2VydmVySGFuZG9mZkNvbXBsZXRlID0gdHJ1ZVxuICB9LCBbXSlcblxuICBpZiAoaWQgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBpZFxuICB9XG5cbiAgcmV0dXJuIGByd2ItJHtpZC50b1N0cmluZygzMil9YFxufVxuXG4vKipcbiAqIEEgaG9vayBmb3IgZ2VuZXJhdGluZyB1bmlxdWUgSURzIHRoYXQgYXJlIHN0YWJsZSBhY3Jvc3MgdGhlIHNlcnZlciBhbmQgY2xpZW50LFxuICogd2hpbGUgYXZvaWRpbmcgaHlkcmF0aW9uIG1pc21hdGNoZXMuIENvbXBhdGlibGUgd2l0aCBSZWFjdCAxNisgYnkgdXNpbmdcbiAqIFtSZWFjdCAxOCdzIHVzZUlkXShodHRwczovL3JlYWN0anMub3JnL2RvY3MvaG9va3MtcmVmZXJlbmNlLmh0bWwjdXNlaWQpIGlmXG4gKiBpdCdzIGF2YWlsYWJsZSwgYW5kIGEgcG9seWZpbGwgaW1wbGVtZW50YXRpb24gaW5zcGlyZWQgYnlcbiAqIFtAYWNjZXNzaWJsZS91c2UtaWRdKGh0dHBzOi8vZ2l0aHViLmNvbS9hY2Nlc3NpYmxlLXVpL3VzZS1pZCkgaWYgaXQgaXMgbm90LlxuICpcbiAqIFwicndiLVwiIGlzIGhhcmQtY29kZWQgYXMgYSBwcmVmaXggaW4gdGhlIHBvbHlmaWxsLiBXaGVuIHVzaW5nIFJlYWN0IDE4KyxcbiAqIGEgcHJlZml4IGNhbiBiZSBwcm92aWRlZCB3aXRoIHRoZSBgaWRlbnRpZmllclByZWZpeGAgb3B0aW9uIGluXG4gKiBbUmVhY3RET01DbGllbnRdKGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9yZWFjdC1kb20tY2xpZW50Lmh0bWwpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlSWQoKSB7XG4gIGNvbnN0IGltcGxlbWVudGF0aW9uID0gUmVhY3QudXNlTWVtbygoKTogKCgpID0+IHN0cmluZyB8IG51bWJlcikgPT4ge1xuICAgIGlmICgndXNlSWQnIGluIFJlYWN0KSByZXR1cm4gUmVhY3QudXNlSWRcbiAgICByZXR1cm4gdXNlSWRQb2x5ZmlsbFxuICB9LCBbXSlcblxuICByZXR1cm4gaW1wbGVtZW50YXRpb24oKVxufVxuIl0sIm5hbWVzIjpbIlJlYWN0IiwiSVNfU0VSVkVSIiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsIklEIiwiZ2VuSWQiLCJzZXJ2ZXJIYW5kb2ZmQ29tcGxldGUiLCJ1c2VJZFBvbHlmaWxsIiwiaWQiLCJzZXRJZCIsInVzZUlkIiwiU1lNQk9MX0tFWSIsIlNZTUJPTF9OQVRJVkVfS0VZIiwiU1lNQk9MX09CU0VSVkVSX0tFWSIsInJlbGF5b3V0IiwicmF0aW8iLCJ3cmFwcGVyIiwiY29udGFpbmVyIiwidXBkYXRlIiwid2lkdGgiLCJoZWlnaHQiLCJsb3dlciIsInVwcGVyIiwibWlkZGxlIiwiUkVMQVlPVVRfU1RSIiwiaXNUZXh0V3JhcEJhbGFuY2VTdXBwb3J0ZWQiLCJjcmVhdGVTY3JpcHRFbGVtZW50IiwiaW5qZWN0ZWQiLCJub25jZSIsInN1ZmZpeCIsIkJhbGFuY2VyQ29udGV4dCIsIlByb3ZpZGVyIiwicHJlZmVyTmF0aXZlIiwiY2hpbGRyZW4iLCJjb250ZXh0VmFsdWUiLCJCYWxhbmNlciIsImFzIiwicHJvcHMiLCJyZWYiLCJ3cmFwcGVyUmVmIiwicHJlZmVyTmF0aXZlQmFsYW5jaW5nIiwiV3JhcHBlciIsInJlc2l6ZU9ic2VydmVyIiwibmV4dF9kZXZfc3R5bGUiLCJjYWxsYmFjayIsIm11dGF0aW9uTGlzdCIsIm11dGF0aW9uIiwibm9kZSIsIm9ic2VydmVyIiwiZWxlbWVudHMiLCJlbGVtZW50Iiwic3JjX2RlZmF1bHQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/react-wrap-balancer@1.1.1_react@18.3.1/node_modules/react-wrap-balancer/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/react-wrap-balancer@1.1.1_react@18.3.1/node_modules/react-wrap-balancer/dist/index.mjs":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-wrap-balancer@1.1.1_react@18.3.1/node_modules/react-wrap-balancer/dist/index.mjs ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Balancer: () => (/* binding */ Balancer),
/* harmony export */   Provider: () => (/* binding */ Provider),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-server-dom-webpack/server.edge */ "(rsc)/./node_modules/.pnpm/next@15.0.3_@opentelemetry+api@1.9.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-server-dom-webpack-server-edge.js");

const Balancer = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call Balancer() from the server but Balancer is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/carlos/Desktop/TFG/TFG/node_modules/.pnpm/react-wrap-balancer@1.1.1_react@18.3.1/node_modules/react-wrap-balancer/dist/index.mjs",
"Balancer",
);const Provider = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call Provider() from the server but Provider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/carlos/Desktop/TFG/TFG/node_modules/.pnpm/react-wrap-balancer@1.1.1_react@18.3.1/node_modules/react-wrap-balancer/dist/index.mjs",
"Provider",
);/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call the default export of \"/Users/carlos/Desktop/TFG/TFG/node_modules/.pnpm/react-wrap-balancer@1.1.1_react@18.3.1/node_modules/react-wrap-balancer/dist/index.mjs\" from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/Users/carlos/Desktop/TFG/TFG/node_modules/.pnpm/react-wrap-balancer@1.1.1_react@18.3.1/node_modules/react-wrap-balancer/dist/index.mjs",
"default",
));


/***/ })

};
;