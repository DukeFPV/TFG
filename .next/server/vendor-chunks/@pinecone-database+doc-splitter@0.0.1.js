"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@pinecone-database+doc-splitter@0.0.1";
exports.ids = ["vendor-chunks/@pinecone-database+doc-splitter@0.0.1"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@pinecone-database+doc-splitter@0.0.1/node_modules/@pinecone-database/doc-splitter/dist/index.js":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@pinecone-database+doc-splitter@0.0.1/node_modules/@pinecone-database/doc-splitter/dist/index.js ***!
  \*****************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MarkdownTextSplitter = exports.RecursiveCharacterTextSplitter = exports.SupportedTextSplitterLanguages = exports.TextSplitter = exports.Document = void 0;\nvar Document = /** @class */ (function () {\n    function Document(fields) {\n        this.pageContent = fields.pageContent || \"\";\n        this.metadata = fields.metadata || {};\n    }\n    return Document;\n}());\nexports.Document = Document;\nvar TextSplitter = /** @class */ (function () {\n    function TextSplitter(fields) {\n        var _a, _b;\n        this.chunkSize = 1000;\n        this.chunkOverlap = 200;\n        this.chunkSize = (_a = fields === null || fields === void 0 ? void 0 : fields.chunkSize) !== null && _a !== void 0 ? _a : this.chunkSize;\n        this.chunkOverlap = (_b = fields === null || fields === void 0 ? void 0 : fields.chunkOverlap) !== null && _b !== void 0 ? _b : this.chunkOverlap;\n        if (this.chunkOverlap >= this.chunkSize) {\n            throw new Error(\"Cannot have chunkOverlap >= chunkSize\");\n        }\n    }\n    TextSplitter.prototype.getNewLinesCount = function (text) {\n        return (text.match(/\\n/g) || []).length;\n    };\n    TextSplitter.prototype.getLoc = function (metadata, from, to) {\n        var loc = metadata.loc && typeof metadata.loc === \"object\"\n            ? __assign({}, metadata.loc) : {};\n        return __assign(__assign({}, metadata), { loc: __assign(__assign({}, loc), { lines: { from: from, to: to } }) });\n    };\n    TextSplitter.prototype.getIntermediateNewLines = function (text, prevChunk, chunk) {\n        if (!prevChunk)\n            return 0;\n        var indexChunk = text.indexOf(chunk);\n        var indexEndPrevChunk = text.indexOf(prevChunk) + prevChunk.length;\n        var removedNewlinesFromSplittingText = text.slice(indexEndPrevChunk, indexChunk);\n        return this.getNewLinesCount(removedNewlinesFromSplittingText);\n    };\n    TextSplitter.prototype.createDocumentsFromText = function (text, metadata) {\n        return __awaiter(this, void 0, void 0, function () {\n            var lineCounterIndex, prevChunk, documents, _i, _a, chunk, intermediateNewLines, newLinesCount, updatedMetadata;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        lineCounterIndex = 1;\n                        prevChunk = null;\n                        documents = [];\n                        _i = 0;\n                        return [4 /*yield*/, this.splitText(text)];\n                    case 1:\n                        _a = _b.sent();\n                        _b.label = 2;\n                    case 2:\n                        if (!(_i < _a.length)) return [3 /*break*/, 4];\n                        chunk = _a[_i];\n                        intermediateNewLines = this.getIntermediateNewLines(text, prevChunk, chunk);\n                        lineCounterIndex += intermediateNewLines;\n                        newLinesCount = this.getNewLinesCount(chunk);\n                        updatedMetadata = this.getLoc(metadata, lineCounterIndex, lineCounterIndex + newLinesCount);\n                        documents.push(new Document({ pageContent: chunk, metadata: updatedMetadata }));\n                        lineCounterIndex += newLinesCount;\n                        prevChunk = chunk;\n                        _b.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 2];\n                    case 4: return [2 /*return*/, documents];\n                }\n            });\n        });\n    };\n    TextSplitter.prototype.createDocuments = function (texts, metadatas) {\n        if (metadatas === void 0) { metadatas = []; }\n        return __awaiter(this, void 0, void 0, function () {\n            var documentPromises;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        metadatas = metadatas.length > 0 ? metadatas : new Array(texts.length).fill({});\n                        documentPromises = texts.map(function (text, i) { return _this.createDocumentsFromText(text, metadatas[i]); });\n                        return [4 /*yield*/, Promise.all(documentPromises)];\n                    case 1: return [2 /*return*/, (_a.sent()).flat()];\n                }\n            });\n        });\n    };\n    TextSplitter.prototype.splitDocuments = function (documents) {\n        return __awaiter(this, void 0, void 0, function () {\n            var selectedDocuments, texts, metadatas;\n            return __generator(this, function (_a) {\n                selectedDocuments = documents.filter(function (doc) { return doc.pageContent !== undefined; });\n                texts = selectedDocuments.map(function (doc) { return doc.pageContent; });\n                metadatas = selectedDocuments.map(function (doc) { return doc.metadata; });\n                return [2 /*return*/, this.createDocuments(texts, metadatas)];\n            });\n        });\n    };\n    TextSplitter.prototype.joinDocs = function (docs, separator) {\n        var text = docs.join(separator).trim();\n        return text === \"\" ? null : text;\n    };\n    TextSplitter.prototype.warnForExcessChunkSize = function (total) {\n        if (total > this.chunkSize) {\n            console.warn(\"Created a chunk of size \".concat(total, \", which is longer than the specified \").concat(this.chunkSize));\n        }\n    };\n    TextSplitter.prototype.createDocAndAdjustCurrentDoc = function (currentDoc, separator, total, len) {\n        var doc = this.joinDocs(currentDoc, separator);\n        while (total > this.chunkOverlap || (total + len > this.chunkSize && total > 0)) {\n            total -= currentDoc[0].length;\n            currentDoc.shift();\n        }\n        return doc;\n    };\n    TextSplitter.prototype.mergeSplits = function (splits, separator) {\n        var docs = [];\n        var currentDoc = [];\n        var total = 0;\n        for (var _i = 0, splits_1 = splits; _i < splits_1.length; _i++) {\n            var d = splits_1[_i];\n            var len = d.length;\n            if (total + len >= this.chunkSize) {\n                this.warnForExcessChunkSize(total);\n                if (currentDoc.length > 0) {\n                    var doc_1 = this.createDocAndAdjustCurrentDoc(currentDoc, separator, total, len);\n                    if (doc_1 !== null) {\n                        docs.push(doc_1);\n                    }\n                }\n            }\n            currentDoc.push(d);\n            total += len;\n        }\n        var doc = this.joinDocs(currentDoc, separator);\n        if (doc !== null) {\n            docs.push(doc);\n        }\n        return docs;\n    };\n    return TextSplitter;\n}());\nexports.TextSplitter = TextSplitter;\nexports.SupportedTextSplitterLanguages = [\n    \"markdown\",\n    \"latex\",\n    \"html\",\n];\nvar RecursiveCharacterTextSplitter = /** @class */ (function (_super) {\n    __extends(RecursiveCharacterTextSplitter, _super);\n    function RecursiveCharacterTextSplitter(fields) {\n        var _this = this;\n        var _a;\n        _this = _super.call(this, fields) || this;\n        _this.separators = [\"\\n\\n\", \"\\n\", \" \", \"\"];\n        _this.separators = (_a = fields === null || fields === void 0 ? void 0 : fields.separators) !== null && _a !== void 0 ? _a : _this.separators;\n        return _this;\n    }\n    RecursiveCharacterTextSplitter.prototype.splitText = function (text) {\n        return __awaiter(this, void 0, void 0, function () {\n            var finalChunks, separator, _i, _a, s, splits, goodSplits, _b, splits_2, s, mergedText, otherInfo, mergedText;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        finalChunks = [];\n                        separator = this.separators[this.separators.length - 1];\n                        for (_i = 0, _a = this.separators; _i < _a.length; _i++) {\n                            s = _a[_i];\n                            if (s === \"\") {\n                                separator = s;\n                                break;\n                            }\n                            if (text.includes(s)) {\n                                separator = s;\n                                break;\n                            }\n                        }\n                        if (separator) {\n                            splits = text.split(separator);\n                        }\n                        else {\n                            splits = text.split(\"\");\n                        }\n                        goodSplits = [];\n                        _b = 0, splits_2 = splits;\n                        _c.label = 1;\n                    case 1:\n                        if (!(_b < splits_2.length)) return [3 /*break*/, 5];\n                        s = splits_2[_b];\n                        if (!(s.length < this.chunkSize)) return [3 /*break*/, 2];\n                        goodSplits.push(s);\n                        return [3 /*break*/, 4];\n                    case 2:\n                        if (goodSplits.length) {\n                            mergedText = this.mergeSplits(goodSplits, separator);\n                            finalChunks.push.apply(finalChunks, mergedText);\n                            goodSplits = [];\n                        }\n                        return [4 /*yield*/, this.splitText(s)];\n                    case 3:\n                        otherInfo = _c.sent();\n                        finalChunks.push.apply(finalChunks, otherInfo);\n                        _c.label = 4;\n                    case 4:\n                        _b++;\n                        return [3 /*break*/, 1];\n                    case 5:\n                        if (goodSplits.length) {\n                            mergedText = this.mergeSplits(goodSplits, separator);\n                            finalChunks.push.apply(finalChunks, mergedText);\n                        }\n                        return [2 /*return*/, finalChunks];\n                }\n            });\n        });\n    };\n    RecursiveCharacterTextSplitter.prototype.mergeSplits = function (splits, separator) {\n        var mergedText = [];\n        var currentChunk = \"\";\n        for (var _i = 0, splits_3 = splits; _i < splits_3.length; _i++) {\n            var s = splits_3[_i];\n            if (currentChunk.length + s.length < this.chunkSize) {\n                currentChunk += s + separator;\n            }\n            else {\n                mergedText.push(currentChunk.trim());\n                currentChunk = s + separator;\n            }\n        }\n        if (currentChunk) {\n            mergedText.push(currentChunk.trim());\n        }\n        return mergedText;\n    };\n    RecursiveCharacterTextSplitter.getSeparatorsForLanguage = function (language) {\n        if (language === \"markdown\") {\n            return [\n                // First, try to split along Markdown headings (starting with level 2)\n                \"\\n## \",\n                \"\\n### \",\n                \"\\n#### \",\n                \"\\n##### \",\n                \"\\n###### \",\n                // Note the alternative syntax for headings (below) is not handled here\n                // Heading level 2\n                // ---------------\n                // End of code block\n                \"```\\n\\n\",\n                // Horizontal lines\n                \"\\n\\n***\\n\\n\",\n                \"\\n\\n---\\n\\n\",\n                \"\\n\\n___\\n\\n\",\n                // Note that this splitter doesn't handle horizontal lines defined\n                // by *three or more* of ***, ---, or ___, but this is not handled\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\",\n            ];\n        }\n        else if (language === \"latex\") {\n            return [\n                // First, try to split along Latex sections\n                \"\\n\\\\chapter{\",\n                \"\\n\\\\section{\",\n                \"\\n\\\\subsection{\",\n                \"\\n\\\\subsubsection{\",\n                // Now split by environments\n                \"\\n\\\\begin{enumerate}\",\n                \"\\n\\\\begin{itemize}\",\n                \"\\n\\\\begin{description}\",\n                \"\\n\\\\begin{list}\",\n                \"\\n\\\\begin{quote}\",\n                \"\\n\\\\begin{quotation}\",\n                \"\\n\\\\begin{verse}\",\n                \"\\n\\\\begin{verbatim}\",\n                // Now split by math environments\n                \"\\n\\\\begin{align}\",\n                \"$$\",\n                \"$\",\n                // Now split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\",\n            ];\n        }\n        else if (language === \"html\") {\n            return [\n                // First, try to split along HTML tags\n                \"<body>\",\n                \"<div>\",\n                \"<p>\",\n                \"<br>\",\n                \"<li>\",\n                \"<h1>\",\n                \"<h2>\",\n                \"<h3>\",\n                \"<h4>\",\n                \"<h5>\",\n                \"<h6>\",\n                \"<span>\",\n                \"<table>\",\n                \"<tr>\",\n                \"<td>\",\n                \"<th>\",\n                \"<ul>\",\n                \"<ol>\",\n                \"<header>\",\n                \"<footer>\",\n                \"<nav>\",\n                // Head\n                \"<head>\",\n                \"<style>\",\n                \"<script>\",\n                \"<meta>\",\n                \"<title>\",\n                // Normal type of lines\n                \" \",\n                \"\",\n            ];\n        }\n        else {\n            throw new Error(\"Language \".concat(language, \" is not supported.\"));\n        }\n    };\n    return RecursiveCharacterTextSplitter;\n}(TextSplitter));\nexports.RecursiveCharacterTextSplitter = RecursiveCharacterTextSplitter;\nvar MarkdownTextSplitter = /** @class */ (function (_super) {\n    __extends(MarkdownTextSplitter, _super);\n    function MarkdownTextSplitter(fields) {\n        return _super.call(this, __assign(__assign({}, fields), { separators: RecursiveCharacterTextSplitter.getSeparatorsForLanguage(\"markdown\") })) || this;\n    }\n    return MarkdownTextSplitter;\n}(RecursiveCharacterTextSplitter));\nexports.MarkdownTextSplitter = MarkdownTextSplitter;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@pinecone-database+doc-splitter@0.0.1/node_modules/@pinecone-database/doc-splitter/dist/index.js\n");

/***/ })

};
;